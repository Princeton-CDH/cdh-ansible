###
# Variables for Geniza that apply across all deploy groups (prod, qa, and staging)
###
---
# Paths are picky and spaces for any YAML multiline syntax causes issues
# GitHub repository
repo: "Princeton-CDH/geniza"
# name of python application
django_app: geniza
# application name
app_name: geniza
# symlink to current deploy in /var/www
symlink: "{{ app_name }}"
# wsgi file relative to apache location
wsgi_path: "{{ django_app }}/wsgi.py"
# use python 3.8
python_version: "3.8"
# nodejs version
node_version: "16"

# Override clone root to use deploy user home instead of root
clone_root: "/home/{{ deploy_user }}/repos"
# for Geniza, we don't distinguish between qa/prod paths
install_root: "/srv/www/{{ app_name }}"
# geniza local settings have a slightly different path
django_local_settings_dest: "{{ deploy }}/{{ django_app }}/settings/local_settings.py"
# configure app-specific local settings
django_local_settings_template: "geniza_settings.py"
# uploaded media directory; must end with trailing slash for nginx
media_root: /srv/www/media/

# pul deploy user
deploy_user: "conan"

# django database backend
db_backend: "postgresql"
db_host: "{{ postgres_host }}"
# postgresql database info
application_dbuser_name: "cdh_geniza"
application_dbuser_password: "{{ vault_db_password }}"
application_db_name: "cdh_geniza"
application_db_host: "{{ postgres_host }}"

# set defaults for princeton; override for other environments
passenger_app_root: "/var/www/{{ app_name }}"
passenger_server_name: "geniza.princeton.edu"
passenger_startup_file: "{{ app_name }}/wsgi.py"
passenger_python: "{{ passenger_app_root }}/env/bin/python"


# source when replicating data/media (from host inventory file)
replication_source_host: geniza_prod

# Redirect old links from PGPv3
# specify server name to ensure https instead of http

# NOTE: nginx makes it difficult to check two parameters at a time;
# rather than complicate this, just check for the pertinent options
passenger_extra_config: |
  location /pgpsearch {

    # object id specified, e.g. /pgpsearch/?a=object&id=2619
    if ($arg_id) {
       return 301 "https://{{ passenger_server_name }}/documents/$arg_id/";
    }
    # tag search, e.g. /pgpsearch/?a=tag&tag=illness
    if ($arg_tag) {
       return 301 "https://{{ passenger_server_name }}/documents/?q=tag:\"$arg_tag\"";
    }
    # search term specified, e.g. /pgpsearch/?a=search&type=meta&q=dating
    # (ignores all other parameters, but search is different anyway)
    if ($arg_q) {
      return 301 "https://{{ passenger_server_name }}/documents/?q=$arg_q";
    }
    # filter by type, e.g. /pgpsearch/?a=type&type=Letter
    if ($arg_type) {
       return 301 "https://{{ passenger_server_name }}/documents/?doctype=$arg_type";
    }

    return 301 "https://{{ passenger_server_name }}/documents/";
    error_log /var/log/nginx/error.log notice;
    rewrite_log on;
  }

# apply reasonable restrictions to licensed fonts based on referrer
font_require_referrer:
  - geniza.cdh.princeton.edu
  - geniza.princeton.edu
  - test-geniza.cdh.princeton.edu
  - "*.percy.io"   # for visual testing

# override webpack build command
webpack_build_qa: 'build'
webpack_build_prod: 'build'

# solr settings
solr_collection: geniza
solr_configset: geniza

# github contexts required for deploy
deploy_contexts:
  - "Python unit tests"

# configure scripts to run as cron jobs
crontab:
  - name: "{{ app_name }} reindex"
    special_time: daily
    job: "env DJANGO_ENV=staging bin/cron-wrapper {{ passenger_app_root }}/env/bin/python{{ python_version }} {{ passenger_app_root }}/manage.py index --no-progress >> {{ logging_dir }}/index.log 2>&1"
    state: absent
  - name: "{{ app_name }} sync transcriptions"
    special_time: hourly
    job: "env DJANGO_ENV=staging bin/cron-wrapper {{ passenger_app_root }}/env/bin/python{{ python_version }} {{ passenger_app_root }}/manage.py sync_transcriptions -v 0 >> {{ logging_dir }}/sync_transcriptions.log 2>&1"
    state: present
