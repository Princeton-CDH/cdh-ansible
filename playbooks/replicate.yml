# playbook to synchronize data and media from production to staging
#
# to use, specify desired hostgroup or hostname, e.g.:
#
#     ansible-playbook playbooks/replicate.yml --limit=cdhweb
#
# If you run the production portion without error and want to rerun
# staging without refreshing production, specify the target host:
#
#     ansible-playbook playbooks/replicate.yml --limit=cdhweb_qa
#
# NOTE: has not been tested running multiple host groups at once!
# probably won't work that way yet

# source hosts tasks
- name: Generate database and media backups on source host
  hosts: geniza_prod, cdhweb_prod
  connection: ssh
  remote_user: pulsys
  # generate backups on source host
  tasks:
    - name: Generate a database dump
      # use existing postgres backup task with customized backup path
      # (role ensures backup dir exists)
      include_role:
        name: postgresql
        tasks_from: backup_db.yml

    - name: Check if media directory has any files
      stat:
        path: "{{ media_root }}/*"
      register: media_files

    - name: Create an archive of application media files, if any exist
      community.general.archive:
        path: "{{ media_root }}"
        dest: "{{ media_backup_path }}"
        owner: "{{ deploy_user }}"
      become: true
      become_user: "{{ deploy_user }}"
      when: media_files.stat.exists == true

# destination host tasks
- name: Restore database and media backups on target host
  # hosts: dev
  # connection: local
  hosts: geniza_qa, cdhweb_qa
  connection: ssh
  remote_user: pulsys
  vars:
     - deploy_user: "conan"
     # - source_user: pulsys
     - source_user: conan   # geniza
     # must define replication_source_host
     # NOTE: override db_backup_filename if db names differ between qa/prod
  tasks:
      - name: Get replication source hostname
        set_fact:
          source_hostname: "{{ item }}"
        with_inventory_hostnames:
          - "{{ replication_source_host }}"

      - name: Create backup path on target destination
        file:
          dest: "{{ dest_backup_path | dirname }}"
          mode: 0777
          # owner: "{{ deploy_user }}"
          state: directory

      - name: Sync database dump to destination host
        # run rsync on dest machine to pull db dump from the source machine
        ansible.builtin.command: /usr/bin/rsync -avz "{{ source_user }}@{{ source_hostname }}:{{ db_backup_path }}" "{{ dest_backup_path }}" -e "ssh -o StrictHostKeyChecking=no"
        become: true
        become_user: "{{ deploy_user }}"

      - name: Check for media tar file on source
        stat:
          path: "{{ media_backup_path }}"
        register: media_backup
        delegate_to: "{{ source_hostname }}"

      - name: Sync media to destination host
        # run rsync on dest machine to pull db dump from the source machine
        ansible.builtin.command: /usr/bin/rsync -avz "{{ source_user }}@{{ source_hostname }}:{{ media_backup_path }}" "{{ dest_backup_dir }}" -e "ssh -o StrictHostKeyChecking=no"
        become: true
        become_user: "{{ deploy_user }}"
        when: media_backup.stat.exists == true

      - name: Calculate unzipped db backup path based on backup path
        set_fact:
          dest_backup_path_unzipped:  "{{ dest_backup_path | replace('.bz2', '') }}"

      - name: Make sure unzipped database dump does not exist (if it does, bunzip2 will fail)
        ansible.builtin.file:
          path: "{{ dest_backup_path_unzipped }}"
          state: absent

      # postgres module can create zipped dump file, but at least on OSX
      # it fails to unzip when attempting to restore;
      # use command line since builtin unarchive task does not handle bz2
      - name: Unzip dumped database
        ansible.builtin.command: bunzip2 "{{ dest_backup_path }}"

      # if we don't clear the database first, loading the dump results in
      # errors/warnings about constraints that already exist
      # NOTE: in local setup, remove database fails if django is running (client connected to db)
      - name: Remove the database "{{ application_db_name }}" on target host if it exists
        community.postgresql.postgresql_db:
          name: "{{ application_db_name }}"
          login_host: '{{ postgres_host }}'
          login_user: '{{ application_dbuser_name }}'
          login_password: '{{ application_dbuser_password }}'
          state: "absent"
        when: "'prod' not in group_names"   # never run this on production

      - name: Create empty database "{{ application_db_name }}" on target host
        community.postgresql.postgresql_db:
          name: "{{ application_db_name }}"
          login_host: '{{ postgres_host }}'
          login_user: "{{ vault_postgres_admin_user }}"
          login_password: "{{ vault_postgres_admin_password }}"
          # worked for my dev setup...
          # login_user: '{{ application_dbuser_name }}'
          # login_password: '{{ application_dbuser_password }}'
          state: "present"
          owner: '{{ application_dbuser_name }}'

      - name: Load the database "{{ application_db_name }}" on target host
        community.postgresql.postgresql_db:
          name: "{{ application_db_name }}"
          encoding: 'UTF-8'
          login_host: '{{ postgres_host }}'
          login_user: '{{ application_dbuser_name }}'
          login_password: '{{ application_dbuser_password }}'
          owner: '{{ application_dbuser_name }}'
          target: "{{ dest_backup_path_unzipped }}"
          state: "restore"

      - name: Extract media to destination media directory
        ansible.builtin.unarchive:
          src: "{{ dest_media_backup_path }}"
          dest: "{{ dest_media_dir }}"
        when: media_backup.stat.exists == true

      # run migrations in current install, using symlink
      - name: Run django migrations on destination
        become: true
        become_user: "{{ deploy_user }}"
        community.general.django_manage:
          command: migrate
          project_path: "{{ install_root }}/current"
          virtualenv: "{{ install_root }}/current/env/"
        environment:
          DJANGO_ENV: staging
          # django env must be set because it currently defaults to development,
          # which attempts to load packages that are not installed

      # all current apps are single-site installs and use site id = 1
      - name: Update django site in destination db
        postgresql_query:
          db: "{{ application_db_name }}"
          login_host: '{{ postgres_host }}'
          login_user: '{{ application_dbuser_name }}'
          login_password: '{{ application_dbuser_password }}'
          query: "UPDATE django_site SET domain = '{{ application_url }}', name = '{{ application_url }}' WHERE id = 1;"
        when: "'prod' not in group_names"   # never run this on production
