---
# Cleanup deployments - cleans up old deployment directories while preserving current/previous
# This role can be run manually with --tags cleanup or triggered automatically as a handler

- name: Clean up old deploy directories
  become: true
  become_user: "{{ deploy_user }}"  # Run as deployment user (e.g., 'conan') to ensure proper permissions
  block:
    - name: Log cleanup start
      ansible.builtin.debug:
        msg: "Starting deployment cleanup in {{ install_root }}..."
    # Step 1: Find all deployment directories using pattern matching
    - name: Find all deploy directories
      ansible.builtin.find:
        paths: "{{ install_root }}"              # e.g., /srv/www/geniza
        file_type: directory                     # Only find directories, not files
        patterns: ["[0-9]*.[0-9]*.[0-9]*-*"]    # Matches: 4.24.0-dev-33e737, 3.15.0-63bcea
      register: all_deploy_dirs

    # Step 2: Check what the 'current' and 'previous' symlinks point to
    # We need to protect these two directories from deletion for rollback capability, even if they're old
    - name: Get current and previous symlink targets
      ansible.builtin.stat:
        path: "{{ install_root }}/{{ item }}"   # Check /srv/www/app/current and /srv/www/app/previous
      loop: [current, previous]
      register: symlink_stats

    # Step 3: Build list of directories that must never be deleted
    - name: Build protected directories list
      ansible.builtin.set_fact:
        protected_dirs: >-
          {{ ([symlink_stats.results[0].stat.lnk_target] if symlink_stats.results[0].stat.islnk else []) +
             ([symlink_stats.results[1].stat.lnk_target] if symlink_stats.results[1].stat.islnk else []) }}

    # Step 4: Sort deployments by age (newest first) and skip protected ones
    - name: Get unprotected deployments sorted by age
      ansible.builtin.set_fact:
        sorted_unprotected: >-
          {{ all_deploy_dirs.files
             | rejectattr('path', 'in', protected_dirs)
             | sort(attribute='mtime', reverse=true) }}

    # Step 5: Keep recent deployments, mark old ones for removal
    - name: Identify old deployments to remove
      ansible.builtin.set_fact:
        dirs_to_remove: >-
          {{ sorted_unprotected[deploy_keep_count|int:] | map(attribute='path') | list }}

    # Step 6: Actually delete the old deployment directories
    - name: Remove old deploy directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent                           # Delete the directory and all its contents
      loop: "{{ dirs_to_remove }}"
      when: dirs_to_remove | length > 0        # Skip this task if nothing to remove

    # Step 7: Show summary of what was cleaned up
    - name: Log cleanup progress
      ansible.builtin.debug:
        msg: "Found {{ all_deploy_dirs.files | length }} deployments, removing {{ dirs_to_remove | length }} old deployments"

    - name: Log cleanup completion
      ansible.builtin.debug:
        msg: "Deployment cleanup completed successfully - removed {{ dirs_to_remove | length }} old deployments"

  tags: [cleanup]

  rescue:
    # If any step fails, trigger deployment failure handling
    - ansible.builtin.include_tasks: roles/create_deployment/tasks/fail.yml
