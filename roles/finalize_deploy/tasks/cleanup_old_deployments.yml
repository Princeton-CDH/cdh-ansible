---
# Cleanup old deployment directories
# This task file can be included by other roles or used independently

- name: Find all deployment directories
  ansible.builtin.find:
    paths: "{{ install_root }}"              # e.g., /srv/www/geniza
    file_type: directory
    patterns: ["[0-9]*.[0-9]*.[0-9]*-*"]    # Matches: 4.24.0-dev-33e737, 3.15.0-63bcea
  register: all_deploy_dirs

- name: Get current and previous symlink targets for cleanup
  ansible.builtin.stat:
    path: "{{ install_root }}/{{ item }}"   # Check /srv/www/app/current and /srv/www/app/previous
  loop: [current, previous]
  register: symlink_stats

- name: Build protected directories list for cleanup
  ansible.builtin.set_fact:
    protected_dirs: >-
      {{ ([symlink_stats.results[0].stat.lnk_target] if symlink_stats.results[0].stat.islnk else []) +
         ([symlink_stats.results[1].stat.lnk_target] if symlink_stats.results[1].stat.islnk else []) }}

- name: Debug protected directories
  ansible.builtin.debug:
    msg: |
      === DEBUG INFO ===
      Protected dirs: {{ protected_dirs }}
      All deployment paths: {{ all_deploy_dirs.files | map(attribute='path') | list }}
      Total found: {{ all_deploy_dirs.files | length }}

- name: Sort deployments and mark old ones for removal
  ansible.builtin.set_fact:
    sorted_unprotected: >-
      {{ all_deploy_dirs.files
         | rejectattr('path', 'in', protected_dirs)
         | sort(attribute='mtime', reverse=true) }}

- name: Keep recent deployments, mark old ones for removal
  ansible.builtin.set_fact:
    dirs_to_remove: >-
      {{ sorted_unprotected[deploy_keep_count|default(3)|int:] | map(attribute='path') | list }}

- name: Delete the old deployment directories with forced removal
  become: true                              # Use root privileges for deletion
  ansible.builtin.shell: |
    echo "Attempting to delete: {{ item }}"
    if [ -d "{{ item }}" ]; then
      # Try multiple deletion strategies
      chmod -R 777 "{{ item }}" 2>/dev/null || true
      chattr -R -i "{{ item }}" 2>/dev/null || true  # Remove immutable flag if set
      rm -rf "{{ item }}" 2>&1 && echo "Successfully deleted {{ item }}" || {
        echo "Failed to delete {{ item }}, error: $?"
        ls -la "{{ item }}" 2>/dev/null || true
      }
    else
      echo "Directory {{ item }} does not exist"
    fi
  loop: "{{ dirs_to_remove }}"
  when: dirs_to_remove | length > 0        # Skip this task if nothing to remove
  register: cleanup_result
  failed_when: false                        # Don't fail deployment, but show errors

- name: Show final deployment status
  ansible.builtin.shell: |
    echo "=== CLEANUP RESULTS ==="
    echo "Total deployments remaining: $(ls -1 {{ install_root }}/ | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | wc -l)"
    echo "=== Current Symlinks ==="
    ls -la {{ install_root }}/ | grep -E '(current|previous)' || echo "No symlinks found"
    echo "=== Latest Deployments ==="
    ls -lt {{ install_root }}/ | grep -E '[0-9]+\.[0-9]+\.[0-9]+' | head -5
  register: final_status
  changed_when: false

- name: Display cleanup completion summary
  ansible.builtin.debug:
    var: final_status.stdout_lines

- name: Show cleanup completion message
  ansible.builtin.debug:
    msg: "Cleanup completed! Attempted to remove {{ dirs_to_remove | length }} directories."
