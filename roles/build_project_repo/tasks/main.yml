###
# Clone and deploy a project repository
#
# This module clones and deploys a project repository to clone_root, which
# should be specified in the group_vars for a particular project.
# It provides repo_info and ver, which are both used to produce the folder
# directory.
#
###
- name: Clone and deploy a project repository
  block:
    - name: Debug environmental variables early in deploy cycle
      debug:
        msg: "PATH: {{ path }} / LD_LIBRARY_PATH: {{ ld_library_path }} / PYTHONPATH: {{ python_path }} / ansible ansible_distribution_release: {{ ansible_distribution_release }}"
        verbosity: 2
      when: ansible_distribution == 'Springdale'

    - name: Ensure deploy user has access to install root
      tags:
        - setup
        - never
      become: true
      file:
        dest: "{{ install_root }}"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        state: directory
        recurse: no  # was yes and was super slow... surely not needed anymore?
      # only set owner when deploy user is defined
      # (i.e. on PUL vms, where deploy user is different than remote user)
      when: deploy_user is defined and ansible_distribution != 'Springdale'

    - name: Clone project repository and set to the correct version
      become: true
      become_user: "{{ deploy_user }}"
      git:
        repo: "{{ repo_url }}/"
        dest: "{{ clone_root }}/{{ repo }}"
        version: "{{ gitref }}"
      # register repo_info for group_vars
      register: repo_info

    - name: Get the version for the python package/app being deployed
      become: true
      become_user: "{{ deploy_user }}"
      shell:
        cmd: "python3 -c 'import {{ python_app }}; print({{ python_app }}.__version__)'"
        chdir: "{{ clone_root}}/{{ repo }}"
      register: python_app_version
      tags:
        - python
      when:
        - python_app is defined
    # - name: Get python package version for deploy path
    #   ansible.builtin.import_tasks: deploy_path_variables.yml

    - name: Create the deploy directory (to recursively create parent dirs if necessary)
      become: true
      tags:
        - setup
        - never
      become_user: "{{ deploy_user }}"
      file:
        state: directory
        dest: "{{ deploy }}"

    # using the local git repository as source, do a shallow, single branch checkout
    # for the deployed instance
    - name: Create a shallow checkout of deploy branch to deploy directory
      become: true
      become_user: "{{ deploy_user }}"
      git:
        repo: "{{ clone_root }}/{{ repo }}"
        dest: "{{ deploy }}/"
        version: "{{ gitref }}"
        single_branch: true
        depth: 1

  rescue:
    - include_tasks: roles/create_deployment/tasks/fail.yml
