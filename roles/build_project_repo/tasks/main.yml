###
# Clone and deploy a project repository
#
# This module clones and deploys a project repository to clone_root, which
# should be specified in the group_vars for a particular project.
# It provides repo_info and ver, which are both used to produce the folder
# directory.
#
###
- name: Clone and deploy a project repository
  block:
    - name: Debug environmental variables early in deploy cycle
      debug:
        msg: 'PATH: {{ path }} / LD_LIBRARY_PATH: {{ ld_library_path }} / PYTHONPATH: {{ python_path}}'
        verbosity: 2
      when: ansible_distribution_release == "RedHat"
    - name: Clone project repository and set to the correct version
      git:
        repo: '{{ repo_url }}/'
        dest: '{{ clone_root }}/{{ repo }}'
        version: '{{ gitref }}'
      # register repo_info for group_vars
      register: repo_info
    - name: Get version information from __init__.py for Python projects
      # This script is present in get_ver.py, and should be safe for all
      # system pythons greater than 2.
      script: get_ver.py {{ clone_root}}/{{ repo }} {{ django_app }}
      register: ver
      check_mode: no
      tags:
        - django
    - name: Create the deploy directory (to recursively create parent dirs if necessary)
      file:
        state: directory
        dest: '{{ deploy }}'

    - name: Set owner on git data repository
      file:
        dest: "{{ deploy }}"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        recurse: yes

    - name: Sync checkout to deploy directory
      synchronize:
        src: '{{ clone_root }}/{{ repo }}/'
        # deploy constructed dynamicallly in group_vars
        dest: '{{ deploy }}/'
      # sync remotely -- inventory_hostname is a magic var that always points
      # to host where the playbook is being run.
      delegate_to: '{{ inventory_hostname }}'
  rescue:
    - include_tasks: roles/create_deployment/tasks/fail.yml
