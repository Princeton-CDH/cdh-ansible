---
# Create a virtual environment and update pip/setuptools. If a requirements.txt
# file is present, install its contents into the virtual environment.

- name: Upgrade pip/setuptools
  become: true
  become_user: "{{ python_user }}"
  ansible.builtin.pip:
    virtualenv: "{{ python_venv_path }}"
    virtualenv_command: python{{ python_version }} -m venv --prompt "{{ python_venv_prompt }}"
    name:
      - pip
      # - setuptools
    state: latest

- name: Downgrade setuptools if 2to3 is required
  ansible.builtin.pip:
    name: "setuptools<58"
    virtualenv: "{{ python_venv_path }}"
  when:  requires_python2to3

- name: Check for requirements.txt file
  become: true
  become_user: "{{ python_user }}"
  ansible.builtin.stat:
    path: "{{ python_requirements_file }}"
  register: _requirements_file

- name: Install python dependencies from requirements.txt
  when: _requirements_file.stat.exists
  become: true
  become_user: "{{ python_user }}"
  ansible.builtin.pip:
    virtualenv: "{{ python_venv_path }}"
    requirements: "{{ python_requirements_file }}"

- name: Check for pyproject.toml file
  become: true
  become_user: "{{ python_user }}"
  ansible.builtin.stat:
    path: "{{ pyproject_toml_file }}"
  register: _pyproject_file

- name: Install python dependencies from pyproject
  when:
    - not _requirements_file.stat.exists
    - _pyproject_file.stat.exists
  become: true
  become_user: "{{ python_user }}"
  ansible.builtin.pip:
    virtualenv: "{{ python_venv_path }}"
    name: "."
    chdir: "{{ python_app_path }}"

- name: Install additional python requirements
  become: true
  become_user: "{{ python_user }}"
  ansible.builtin.pip:
    virtualenv: "{{ python_venv_path }}"
    name: "{{ python_extra_packages }}"
  when: python_extra_packages is defined
