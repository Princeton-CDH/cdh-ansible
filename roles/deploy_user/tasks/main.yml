---
# tasks file for deploy_user
- name: set up deploy user
  become: true
  tags: setup
  block:
    - name: create deploy user group
      group:
        name: "{{ deploy_user }}"

    - name: create deploy user
      user:
        name: "{{ deploy_user }}"
        groups:
          - "{{ deploy_user }}"
          - "{{ apache_group }}"
        home: "/home/{{ deploy_user }}"
        shell: "{{ deploy_user_shell }}"

    - name: Create bash profile
      template:
        src: "bash_profile.j2"
        dest: "/home/{{ deploy_user }}/.profile"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: 0600

    - name: Check to see if .ssh directory exists
      stat:
        path: "/home/{{ deploy_user }}/.ssh/"
      register: deploy_user_ssh_dir

    - name: Create the .ssh directory
      file:
        path: "/home/{{ deploy_user }}/.ssh/"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: 0700
      when: not deploy_user_ssh_dir.stat.exists

    - name: Install private ssh key
      copy:
        src: files/id_rsa
        dest: "/home/{{ deploy_user }}/.ssh/id_rsa"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: 0600

    - name: Add SSH public key
      authorized_key:
        user: "{{ deploy_user }}"
        key: "{{ lookup('file', 'files/id_rsa.pub') }}"

    - name: Allow "authorized_key" files
      lineinfile: >
                  dest=/etc/ssh/sshd_config
                  state=present
                  backrefs=yes
                  regexp='^#AuthorizedKeysFile(.*?)$'
                  line="AuthorizedKeysFile\1"

    - name: allow deploy user to SSH
      lineinfile: >
                  dest=/etc/ssh/sshd_config
                  state=present
                  backrefs=yes
                  regexp='^AllowUsers(.*?)( ?)({{ deploy_user }})?$'
                  line="AllowUsers\1 {{ deploy_user }}"
      notify:
        - restart ssh

    # by default, handlers run at the end of the playbook; we need the ssh restart
    # to take effect for subsequent tasks
    - name: Flush handlers (trigger ssh restart if needed)
      meta: flush_handlers

    - name: "Create pulsys bash alias file"
      template:
        src: "pulsys_bash_alias.j2"
        dest: "/home/{{ ansible_user }}/.bash_aliases"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0600
      when: ansible_user != "root"

  rescue:
    - include_tasks: roles/create_deployment/tasks/fail.yml
