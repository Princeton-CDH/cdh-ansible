###
# This playbook provision the Vagrant host so that it can mimic as closely as
# possible the functioning of the Springdale VMs that host our production
# Django projects.
#
# In addition to stock yum installs, it also installs solr of the version
# specified in {{ solr_ver }} from Apache's archive and configures it as a
# systemd service.
#
# The script is idempotent, and it will intelligently skip the Solr install
# if it is found among system services.
###

---
# This task runs on the host machine, because git stores files as 644 or 755
# and host keys need to be 600, even if we're using a deliberately insecure
# key for a test box as in this case.

- name: Configure base configurations
  connection: local
  become: true
  hosts: all
  vars:
    templates_dir: '../templates'
    solr_ver: 6.6.5
  tasks:
    - name: Set permissions on id_rsa after any git changes
      local_action:
        module: file
        path: id_rsa
        mode: 0600
      become: false
    - name: Update all packages on the base box
      yum:
        name: '*'
        state: latest
    - name: Install SCL and EPEL repo
      yum:
        name: '{{ item }}'
        state: present
      with_items:
        - centos-release-scl
        - epel-release
    - name: Install base packages
      yum:
        name: '{{ item }}'
        state: present
      with_items:
        # all the python versions and mod_wsgi's in use
        - rh-python35
        - rh-python36
        - rh-python35-mod_wsgi
        - rh-python36-mod_wsgi
        # all versions of nodejs in use in CDH projects
        - rh-nodejs8
        - rh-nodejs6
        # webserver with a python3 implementation of mod_wsgi
        - httpd24-httpd
        # mariadb and development headers
        - mariadb
        - mariadb-server
        - mariadb-devel
        # adapter for use with Ansible
        - MySQL-python
        # needed packages for Solr
        - lsof
        - java
        # git for git clones
        - git
        # libsass for Derrida and ruby gem for sass exectuable
        - libsass
        - rubygem-sass
    - name: Get service facts
      service_facts:
    - name: Download solr
      get_url:
        url: 'https://archive.apache.org/dist/lucene/solr/{{ solr_ver }}/solr-{{ solr_ver }}.tgz'
        dest: /vagrant
      when: '"solr" not in services'
    - name: Extract solr install script
      command: 'tar xzf /vagrant/solr-6.6.5.tgz
        solr-6.6.5/bin/install_solr_service.sh --strip-components=2'
      args:
        warn: false
      when: '"solr" not in services'
    - name: Run solr install script
      command: '/vagrant/install_solr_service.sh /vagrant/solr-{{ solr_ver }}.tgz'
      when: '"solr" not in services'
    - name: Get the non systemctl managed solr process that just got created
      shell: 'pgrep -u solr'
      register: solr_process
      when: '"solr" not in services'
    - name: Kill the unmanaged solr process
      shell: 'kill {{ item }}'
      with_items: '{{ solr_process.stdout_lines  }}'
      when: '"solr" not in services'
    - name: Create deploy user
      user:
        user: deploy
        group: apache
        state: present
        createhome: yes
    - name: Create wheel group if not present
      group:
        name: wheel
        state: present
    - name: Grant passwordless sudo to wheel
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
    - name: Add deploy to wheel
      user:
        name: deploy
        groups: wheel
        append: yes
        state: present
    - name: Give deploy insecure pub_key
      authorized_key:
        user: deploy
        state: present
        key: '{{ lookup("file", "/vagrant/id_rsa.pub")}}'
    - name: Create /srv/www/ if it doesn't exist
      file:
        path: /srv/www
        owner: deploy
        group: apache
        mode: ug+rwx,o+x
        state: directory
    - name: Create /var/www if it doesn't exist
      file:
        path: /var/www
        owner: deploy
        group: apache
        mode: ug+rwx,o+x
        state: directory
    - name: Symlink in httpd24-httpd to /etc/httpd
      file:
        src: /opt/rh/httpd24/root/etc/httpd
        dest: /etc/httpd
        owner: root
        group: root
        state: link
    - name: Configure virtualenv sefcontext rules
      sefcontext:
        target: '/srv/www/prod(/.*)?/env(/.*)?'
        setype: httpd_sys_script_exec_t
    - name: Configure log sefcontext rules
      sefcontext:
        target: '/srv/www/prod/logs(/.*)?'
        setype: httpd_log_t
    - name: Enable services
      service:
        name: '{{ item }}'
        enabled: yes
        state: restarted
      with_items:
        - mariadb
        - httpd24-httpd
        - solr
    - name: Configure MySQL user with privs on staging db
      mysql_user:
        name: staging
        password: staging
        priv: 'staging.*:ALL'
        state: present
    - name: Create a .my.cnf for deploy so it can access database
      template:
        dest: /home/deploy/.my.cnf
        src: my.cnf
